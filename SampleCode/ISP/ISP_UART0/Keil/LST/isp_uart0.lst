C51 COMPILER V9.52.0.0   ISP_UART0                                                         05/07/2021 15:19:32 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE ISP_UART0
OBJECT MODULE PLACED IN .\Output\isp_uart0.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE ..\isp_uart0.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR(..\..\..\..\Libra
                    -ry\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\LST\isp_uart0.lst) TABS(2) OBJECT(.\Output\isp_uart0.
                    -obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2021 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  File Function: MUG51 UART0 ISP subroutine
   9          //********************************************************************************************************
             -***
  10          #include "MUG51.h"
  11          #include "isp_uart0.h"
*** WARNING C317 IN LINE 24 OF ..\isp_uart0.h: attempt to redefine macro 'PAGE_SIZE'
  12          
  13          xdata volatile uint8_t uart_rcvbuf[64];
  14          xdata volatile uint8_t uart_txbuf[64];
  15          data volatile uint8_t bufhead;
  16          data volatile uint16_t flash_address;
  17          data volatile uint16_t AP_size;
  18          data volatile uint8_t g_timer1Counter;
  19          data volatile uint8_t count;
  20          data volatile uint16_t g_timer0Counter;
  21          data volatile uint32_t g_checksum;
  22          data volatile uint32_t g_totalchecksum;
  23          bit volatile bUartDataReady;
  24          bit volatile g_timer0Over;
  25          bit volatile g_timer1Over;
  26          bit volatile g_programflag;
  27          bit  BIT_TMP;
  28          unsigned char PID_highB, PID_lowB, DID_highB, DID_lowB, CONF0, CONF1, CONF2, CONF4;
  29          unsigned char recv_CONF0, recv_CONF1, recv_CONF2, recv_CONF4;
  30          
  31          void READ_ID(void)
  32          {
  33   1      //    set_CHPCON_IAPEN;
  34   1          IAPCN = READ_DID;
  35   1          IAPAH = 0x00;
  36   1          IAPAL = 0x00;
  37   1          set_IAPTRG_IAPGO;
  38   1          DID_lowB = IAPFD;
  39   1          IAPAL = 0x01;
  40   1          set_IAPTRG_IAPGO;
  41   1          DID_highB = IAPFD;
  42   1          IAPAL = 0x02;
  43   1          set_IAPTRG_IAPGO;
  44   1          PID_lowB = IAPFD;
  45   1          IAPAL = 0x03;
C51 COMPILER V9.52.0.0   ISP_UART0                                                         05/07/2021 15:19:32 PAGE 2   

  46   1          set_IAPTRG_IAPGO;
  47   1          PID_highB = IAPFD;
  48   1      }
  49          void READ_CONFIG(void)
  50          {
  51   1          IAPCN = BYTE_READ_CONFIG;
  52   1          IAPAL = 0x00;
  53   1          IAPAH = 0x00;
  54   1          set_IAPTRG_IAPGO;
  55   1          CONF0 = IAPFD;
  56   1          IAPAL = 0x01;
  57   1          set_IAPTRG_IAPGO;
  58   1          CONF1 = IAPFD;
  59   1          IAPAL = 0x02;
  60   1          set_IAPTRG_IAPGO;
  61   1          CONF2 = IAPFD;
  62   1          IAPAL = 0x04;
  63   1          set_IAPTRG_IAPGO;
  64   1          CONF4 = IAPFD;
  65   1      //    clr_CHPCON_IAPEN;
  66   1      }
  67          
  68          void TM0_ini(void)
  69          {
  70   1          TH0 = TL0 = 0;     //interrupt timer 140us
  71   1          set_TCON_TR0;      //Start timer0
  72   1          set_IPH_PSH;       // Serial port 0 interrupt level2
  73   1          set_IE_ET0;
  74   1      }
  75          
  76          
  77          void UART0_ini_115200_24MHz(void)
  78          {
  79   1          MFP_P31_UART0_TXD;                              /* set P2.3 and P2.2 as Quasi mode for UART0 trasnfer 
             -*/
  80   1          MFP_P30_UART0_RXD;
  81   1          P31_QUASI_MODE;
  82   1          P30_QUASI_MODE;
  83   1        
  84   1          SFRS = 0x00;
  85   1          SCON = 0x50;            /*UART0 Mode1,REN=1,TI=1*/
  86   1          set_PCON_SMOD;          /*UART0 Double Rate Enable*/
  87   1          T3CON &= 0xF8;           /*T3PS2=0,T3PS1=0,T3PS0=0(Prescale=1)*/
  88   1          set_T3CON_BRCK;          /*UART0 baud rate clock source = Timer3*/
  89   1          RH3    = 0xFF;   /* HIBYTE(65536 - 13)*/
  90   1          RL3    = 0xF3;   /* LOBYTE(65536 - 13); */
  91   1          set_T3CON_TR3;          /*Trigger Timer3*/
  92   1          ES=1;
  93   1          EA=1;
  94   1      }
  95          
  96          void Package_checksum(void)
  97          {
  98   1          g_checksum = 0;
  99   1      
 100   1          for (count = 0; count < 64; count++)
 101   1          {
 102   2              g_checksum = g_checksum + uart_rcvbuf[count];
 103   2          }
 104   1      
 105   1          uart_txbuf[0] = g_checksum & 0xff;
 106   1          uart_txbuf[1] = (g_checksum >> 8) & 0xff;
C51 COMPILER V9.52.0.0   ISP_UART0                                                         05/07/2021 15:19:32 PAGE 3   

 107   1          uart_txbuf[4] = uart_rcvbuf[4] + 1;
 108   1          uart_txbuf[5] = uart_rcvbuf[5];
 109   1      
 110   1          if (uart_txbuf[4] == 0x00)
 111   1              uart_txbuf[5]++;
 112   1      
 113   1      }
 114          
 115          
 116          void Send_64byte_To_UART0(void)
 117          {
 118   1      _push_(SFRS);
 119   1          SFRS = 0;
 120   1          for (count = 0; count < 64; count++)
 121   1          {
 122   2              TI = 0;
 123   2              SBUF = uart_txbuf[count];
 124   2              set_WDCON_WDCLR;
 125   2              while (TI == 0);
 126   2          }
 127   1      _pop_(SFRS);
 128   1      }
 129          
 130          void Serial_ISR(void) interrupt 4
 131          {
 132   1        SFRS=0;
 133   1          if (RI == 1)
 134   1          {   
 135   2            uart_rcvbuf[bufhead++]=  SBUF;    
 136   2            clr_SCON_RI;                                         // Clear RI (Receive Interrupt).
 137   2          }
 138   1          if (TI == 1)
 139   1          {       
 140   2              clr_SCON_TI;                                       // Clear TI (Transmit Interrupt).
 141   2          }
 142   1          if(bufhead ==1)
 143   1          {
 144   2            g_timer1Over=0;
 145   2            g_timer1Counter=90;                                  //for check uart timeout using
 146   2          }
 147   1        if(bufhead == 64)
 148   1          {
 149   2            
 150   2            bUartDataReady = TRUE;
 151   2            g_timer1Counter=0;
 152   2            g_timer1Over=0;
 153   2            bufhead = 0;
 154   2          }    
 155   1      }
 156          
 157          void Timer0_ISR(void) interrupt 1
 158          {
 159   1          _push_(SFRS);
 160   1      //    if (g_timer0Counter)
 161   1          if (!g_timer0Over)
 162   1          {
 163   2              g_timer0Counter--;
 164   2              if (!g_timer0Counter)
 165   2              {
 166   3                  g_timer0Over = 1;
 167   3              }
 168   2          }
C51 COMPILER V9.52.0.0   ISP_UART0                                                         05/07/2021 15:19:32 PAGE 4   

 169   1          if (g_timer1Counter)
 170   1          {
 171   2              g_timer1Counter--;
 172   2              if (!g_timer1Counter)
 173   2              {
 174   3                  g_timer1Over = 1;
 175   3              }
 176   2          }
 177   1          _pop_(SFRS);
 178   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    632    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    140    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      5    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
